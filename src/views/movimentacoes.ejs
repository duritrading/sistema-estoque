<%- include('partials/header', {
  titulo: 'Movimenta√ß√µes de Estoque',
  subtitulo: 'Entradas e sa√≠das de produtos',
  user: locals.user
}) %>

<div class="card">
  <h2>‚ûï Nova Movimenta√ß√£o</h2>
  <form action="/movimentacoes" method="POST">
    <!-- CAMPO DE DATA -->
    <div class="form-group">
      <label for="data_movimentacao">Data da Movimenta√ß√£o *</label>
      <input type="date" id="data_movimentacao" name="data_movimentacao" required>
      <small style="color: #666; display: block; margin-top: 5px;">
        ‚ÑπÔ∏è Selecione a data em que a movimenta√ß√£o realmente ocorreu (permite lan√ßamentos retroativos)
      </small>
    </div>

    <div class="form-row">
      <div class="form-group">
        <label for="produto_id">Produto *</label>
        <select id="produto_id" name="produto_id" required>
          <option value="">Selecione um produto</option>
          <% produtos.forEach(p => { %>
            <option value="<%= p.id %>"><%= p.codigo %> - <%= p.descricao %></option>
          <% }) %>
        </select>
        <span id="unidade_produto" style="margin-left: 10px; font-weight: bold; color: #555;"></span>
      </div>
      <div class="form-group">
        <label for="tipo">Tipo *</label>
        <select id="tipo" name="tipo" required>
          <option value="">Selecione o tipo</option>
          <option value="ENTRADA">Entrada</option>
          <option value="SAIDA">Sa√≠da</option>
        </select>
      </div>
    </div>
    
    <div class="form-row">
      <div class="form-group">
        <label for="quantidade">Quantidade *</label>
        <input type="number" id="quantidade" name="quantidade" step="0.001" min="0.001" required>
      </div>
      <div class="form-group">
        <label for="preco_unitario">Pre√ßo Unit√°rio (R$)</label>
        <input type="number" id="preco_unitario" name="preco_unitario" step="0.01" min="0">
      </div>
    </div>

    <!-- CAMPOS PARA ENTRADA (Fornecedor + Fluxo de Caixa) -->
    <div id="entrada-fields" style="display: none;">
      <div class="form-group">
        <label for="fornecedor_id">Fornecedor</label>
        <select id="fornecedor_id" name="fornecedor_id">
          <option value="">Selecione um fornecedor</option>
          <% fornecedores.forEach(f => { %>
            <option value="<%= f.id %>"><%= f.nome %></option>
          <% }) %>
        </select>
        <small style="display: block; margin-top: 5px;">
          <a href="/fornecedores" target="_blank">+ Cadastrar novo fornecedor</a>
        </small>
      </div>
      
      <!-- CONTROLE DE FLUXO DE CAIXA -->
      <div class="form-group" style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #007bff;">
        <div style="display: flex; align-items: center; gap: 10px;">
          <input type="checkbox" id="registrar_fluxo_caixa" name="registrar_fluxo_caixa" style="transform: scale(1.2);">
          <label for="registrar_fluxo_caixa" style="margin: 0; font-weight: bold; color: #007bff;">
            üí∞ Registrar esta entrada no fluxo de caixa
          </label>
        </div>
        <small style="color: #666; display: block; margin-top: 8px; margin-left: 32px;">
          ‚ÑπÔ∏è Marque esta op√ß√£o apenas se esta entrada representar uma sa√≠da de dinheiro real (compra paga). 
          Deixe desmarcado para entradas que n√£o afetam o caixa (doa√ß√µes, consigna√ß√µes, etc.).
        </small>
        <div id="fluxo_aviso" style="display: none; background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin-top: 10px; border-radius: 4px; margin-left: 32px;">
          <small style="color: #856404;">
            ‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Esta entrada ser√° registrada como <strong>D√âBITO</strong> no fluxo de caixa (sa√≠da de dinheiro para compra de produtos).
          </small>
        </div>
      </div>
    </div>

    <!-- CAMPOS PARA SA√çDA (Cliente e RCA) -->
    <div id="saida-fields" style="display: none;">
      <div class="form-row">
        <div class="form-group">
          <label for="cliente_nome">Cliente *</label>
          <select id="cliente_nome" name="cliente_nome" class="form-control">
            <option value="">Selecione um cliente</option>
            <% clientes.forEach(cliente => { %>
              <option value="<%= cliente.nome %>"><%= cliente.nome %></option>
            <% }) %>
          </select>
          <small style="display: block; margin-top: 5px;">
            <a href="/clientes" target="_blank">+ Cadastrar novo cliente</a>
          </small>
        </div>
        <div class="form-group">
          <label for="rca">RCA</label>
          <select id="rca" name="rca" class="form-control">
            <option value="">Selecione um RCA</option>
            <% rcas.forEach(rca => { %>
              <option value="<%= rca.nome %>"><%= rca.nome %></option>
            <% }) %>
          </select>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
            <label for="total_parcelas">N¬∫ de Parcelas</label>
            <input type="number" id="total_parcelas" name="total_parcelas" min="1" value="1">
        </div>
      </div>
      <div id="vencimentos-container" class="form-row"></div>
    </div>

    <div class="form-row">
      <div class="form-group">
        <label for="documento">Documento</label>
        <input type="text" id="documento" name="documento" placeholder="NF, Pedido, etc.">
      </div>
      <div class="form-group">
        <label for="valor_total">Valor Total (R$)</label>
        <input type="number" id="valor_total" name="valor_total" step="0.01" min="0" readonly>
      </div>
    </div>

    <div class="form-group">
      <label for="observacao">Observa√ß√µes</label>
      <textarea id="observacao" name="observacao" rows="3"></textarea>
    </div>

    <button type="submit" class="btn">Registrar Movimenta√ß√£o</button>
  </form>
</div>

<div class="card">
  <h2>üìã √öltimas Movimenta√ß√µes</h2>
  <table class="table">
    <thead>
      <tr>
        <th>Data</th>
        <th>Produto</th>
        <th>Tipo</th>
        <th>Quantidade</th>
        <th>Valor Unit.</th>
        <th>Valor Total</th>
        <th>Cliente/Fornecedor</th>
        <th>Documento</th>
        <th>Parcelas</th>
        <th>A√ß√µes</th>
      </tr>
    </thead>
    <tbody>
      <% movimentacoes.forEach(m => { %>
        <tr>
          <td><%= new Date(m.created_at).toLocaleDateString('pt-BR', { timeZone: 'UTC' }) %></td>
          <td><%= m.codigo %> - <%= m.descricao %></td>
          <td><span class="badge <%= m.tipo === 'ENTRADA' ? 'badge-success' : 'badge-danger' %>"><%= m.tipo %></span></td>
          <td><%= parseFloat(m.quantidade).toLocaleString('pt-BR') %></td>
          <td>
            <% if (m.preco_unitario) { %>
              R$ <%= parseFloat(m.preco_unitario).toLocaleString('pt-BR', {minimumFractionDigits: 2}) %>
            <% } else { %>
              -
            <% } %>
          </td>
          <td>
            <% if (m.valor_total) { %>
              <strong>R$ <%= parseFloat(m.valor_total).toLocaleString('pt-BR', {minimumFractionDigits: 2}) %></strong>
            <% } else { %>
              -
            <% } %>
          </td>
          <td><%= m.tipo === 'ENTRADA' ? (m.fornecedor_nome || '-') : (m.cliente_nome || '-') %></td>
          <td><%= m.documento || '-' %></td>
          <td><%= m.total_parcelas || '-' %></td>
          <td>
            <form action="/movimentacoes/delete/<%= m.id %>" method="POST" onsubmit="return confirm('ATEN√á√ÉO: Excluir uma movimenta√ß√£o √© uma a√ß√£o irrevers√≠vel e ir√° apagar tamb√©m todas as parcelas de faturamento associadas a ela. Deseja continuar?');">
              <button type="submit" class="btn btn-danger" style="padding: 5px 10px; font-size: 12px;">Excluir</button>
            </form>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
</div>

<!-- Dados dos produtos para o JavaScript -->
<script type="application/json" id="produtos-data">
  <%- JSON.stringify(produtos) %>
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // ===== OBTER ELEMENTOS DO DOM =====
    const produtosDataElement = document.getElementById('produtos-data');
    if (!produtosDataElement) return;
    
    const produtos = JSON.parse(produtosDataElement.textContent);

    // Elementos do formul√°rio
    const produtoSelect = document.getElementById('produto_id');
    const tipoSelect = document.getElementById('tipo');
    const quantidadeInput = document.getElementById('quantidade');
    const precoUnitarioInput = document.getElementById('preco_unitario');
    const valorTotalInput = document.getElementById('valor_total');
    const spanUnidade = document.getElementById('unidade_produto');
    const dataMovimentacaoInput = document.getElementById('data_movimentacao');
    
    // Containers de campos espec√≠ficos
    const entradaFields = document.getElementById('entrada-fields');
    const saidaFields = document.getElementById('saida-fields');
    
    // Campos espec√≠ficos
    const clienteNomeSelect = document.getElementById('cliente_nome');
    const fornecedorSelect = document.getElementById('fornecedor_id');
    const parcelasInput = document.getElementById('total_parcelas');
    const vencimentosContainer = document.getElementById('vencimentos-container');
    
    // Campos de fluxo de caixa
    const registrarFluxoCaixaCheckbox = document.getElementById('registrar_fluxo_caixa');
    const fluxoAviso = document.getElementById('fluxo_aviso');

    // ===== FUN√á√ÉO PARA DEFINIR DATA PADR√ÉO =====
    function definirDataPadrao() {
        if (dataMovimentacaoInput) {
            const hoje = new Date();
            const dataFormatada = hoje.toISOString().split('T')[0];
            dataMovimentacaoInput.value = dataFormatada;
        }
    }

    // ===== FUN√á√ÉO PARA MOSTRAR UNIDADE =====
    function mostrarUnidade() {
        if (!produtoSelect || !spanUnidade) return;
        const produtoId = produtoSelect.value;
        spanUnidade.textContent = '';
        
        if (produtoId) {
            const produtoSelecionado = produtos.find(p => p.id == produtoId);
            if (produtoSelecionado) {
                spanUnidade.textContent = `(${produtoSelecionado.unidade || 'UN'})`;
            }
        }
    }

    // ===== FUN√á√ÉO PARA CALCULAR VALOR TOTAL =====
    function calcularValorTotal() {
        if (!quantidadeInput || !precoUnitarioInput || !valorTotalInput) return;
        
        const quantidade = parseFloat(quantidadeInput.value) || 0;
        const precoUnitario = parseFloat(precoUnitarioInput.value) || 0;
        const valorTotal = quantidade * precoUnitario;
        
        valorTotalInput.value = valorTotal.toFixed(2);
        
        // Mostrar/esconder aviso de fluxo de caixa
        toggleFluxoAviso();
    }

    // ===== FUN√á√ÉO PARA TOGGLE DO AVISO DE FLUXO =====
    function toggleFluxoAviso() {
        if (!registrarFluxoCaixaCheckbox || !fluxoAviso || !valorTotalInput) return;
        
        const valorTotal = parseFloat(valorTotalInput.value) || 0;
        const fluxoMarcado = registrarFluxoCaixaCheckbox.checked;
        
        if (fluxoMarcado && valorTotal > 0) {
            fluxoAviso.style.display = 'block';
        } else {
            fluxoAviso.style.display = 'none';
        }
    }

    // ===== FUN√á√ÉO PARA GERAR CAMPOS DE VENCIMENTO =====
    function gerarCamposDeVencimento() {
        if (!parcelasInput || !vencimentosContainer) return;
        
        const numParcelas = parseInt(parcelasInput.value) || 0;
        vencimentosContainer.innerHTML = '';

        if (numParcelas > 0) {
            // Usar data da movimenta√ß√£o como base, ou hoje se n√£o fornecida
            const baseDate = dataMovimentacaoInput && dataMovimentacaoInput.value 
                ? new Date(dataMovimentacaoInput.value) 
                : new Date();
            
            for (let i = 1; i <= numParcelas; i++) {
                const dataVencimento = new Date(baseDate);
                dataVencimento.setDate(baseDate.getDate() + (i * 30));
                const dataFormatada = dataVencimento.toISOString().split('T')[0];
                
                const formGroup = document.createElement('div');
                formGroup.className = 'form-group';
                formGroup.innerHTML = `
                  <label for="vencimento_parcela_${i}">Vencimento Parcela ${i}</label>
                  <input type="date" id="vencimento_parcela_${i}" name="vencimentos[]" value="${dataFormatada}" required class="form-control">
                `;
                vencimentosContainer.appendChild(formGroup);
            }
        }
    }

    // ===== FUN√á√ÉO PRINCIPAL: TOGGLE FIELDS =====
    function toggleFields() {
        console.log('toggleFields chamada'); // Debug
        
        if (!tipoSelect) {
            console.log('tipoSelect n√£o encontrado'); // Debug
            return;
        }
        
        const tipo = tipoSelect.value;
        console.log('Tipo selecionado:', tipo); // Debug
        
        if (tipo === 'ENTRADA') {
            console.log('Mostrando campos de ENTRADA'); // Debug
            
            // Mostra campos de entrada, esconde de sa√≠da
            if (entradaFields) entradaFields.style.display = 'block';
            if (saidaFields) saidaFields.style.display = 'none';
            
            // Ajusta campos obrigat√≥rios
            if (clienteNomeSelect) clienteNomeSelect.required = false;
            if (fornecedorSelect) fornecedorSelect.required = false;
            
            // Limpa campos de sa√≠da
            if (clienteNomeSelect) clienteNomeSelect.value = '';
            
            // Marcar fluxo de caixa por padr√£o para entradas
            if (registrarFluxoCaixaCheckbox) {
                registrarFluxoCaixaCheckbox.checked = true;
                toggleFluxoAviso();
            }
            
        } else if (tipo === 'SAIDA') {
            console.log('Mostrando campos de SA√çDA'); // Debug
            
            // Mostra campos de sa√≠da, esconde de entrada
            if (entradaFields) entradaFields.style.display = 'none';
            if (saidaFields) saidaFields.style.display = 'block';
            
            // Ajusta campos obrigat√≥rios
            if (clienteNomeSelect) clienteNomeSelect.required = true;
            if (fornecedorSelect) fornecedorSelect.required = false;
            
            // Limpa campos de entrada
            if (fornecedorSelect) fornecedorSelect.value = '';
            if (registrarFluxoCaixaCheckbox) registrarFluxoCaixaCheckbox.checked = false;
            
            // Gera campos de vencimento
            gerarCamposDeVencimento();
            
        } else {
            console.log('Nenhum tipo selecionado, escondendo todos os campos'); // Debug
            
            // Esconde todos se nenhum tipo selecionado
            if (entradaFields) entradaFields.style.display = 'none';
            if (saidaFields) saidaFields.style.display = 'none';
            if (clienteNomeSelect) clienteNomeSelect.required = false;
            if (fornecedorSelect) fornecedorSelect.required = false;
            if (registrarFluxoCaixaCheckbox) registrarFluxoCaixaCheckbox.checked = false;
        }
        
        toggleFluxoAviso();
    }

    // ===== ADICIONAR EVENT LISTENERS =====
    if (produtoSelect) {
        produtoSelect.addEventListener('change', mostrarUnidade);
    }

    if (quantidadeInput) {
        quantidadeInput.addEventListener('input', calcularValorTotal);
    }

    if (precoUnitarioInput) {
        precoUnitarioInput.addEventListener('input', calcularValorTotal);
    }

    if (tipoSelect) {
        tipoSelect.addEventListener('change', function() {
            console.log('Tipo alterado para:', this.value); // Debug
            toggleFields();
        });
    }

    if (parcelasInput) {
        parcelasInput.addEventListener('input', gerarCamposDeVencimento);
    }

    if (dataMovimentacaoInput) {
        dataMovimentacaoInput.addEventListener('change', gerarCamposDeVencimento);
    }

    // Event listener para checkbox de fluxo de caixa
    if (registrarFluxoCaixaCheckbox) {
        registrarFluxoCaixaCheckbox.addEventListener('change', toggleFluxoAviso);
    }

    // ===== CHAMADAS INICIAIS =====
    console.log('Inicializando...'); // Debug
    definirDataPadrao();
    mostrarUnidade();
    toggleFields(); // Esta √© a chamada importante!
    
    console.log('Inicializa√ß√£o completa'); // Debug
});
</script>
    
<%- include('partials/footer') %>